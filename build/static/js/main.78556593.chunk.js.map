{"version":3,"sources":["components/swaipServer/swaipServer.js","components/serch/serch.js","components/block/block.js","components/serchResult/serchResult.js","components/error404/error404.js","index.js"],"names":["SwapeServer","_apiBase","nameMovis","page","fetch","this","res","ok","Error","status","json","getResurse","results","Serch","getSerchValue","onClickReted","selectedRetedFlag","value","debSave","useCallback","debounce","onClickRetedFlagTrue","onClickRetedFlagFalse","selectedSerch","selectedReted","className","type","onClick","onKeyDown","onChange","e","target","placeholder","Block","state","loading","selected","image","image1","show","genresId","genres","props","map","iterator","id","name","click","loadImg","setState","color","voteAverage","truncate","re","match","l","length","replace","posterPath","poster_path","originalTitle","original_title","overview","vote_average","releaseDate","release_date","genreIds","genre_ids","genreId","newOverview","loadingImg","genreElement","element","i","key","src","alt","onLoad","allowHalf","defaultValue","count","Component","SerchResult","resultSerch","item","itemProps","defaultProps","Error404","swapeServer","App","flagOneDownloadPage","totalResults","error404","valueSerch","reted","pageClick","current","getAllPeople","then","r","total_results","catch","onClickRetedFlag","flag","getAllGeneres","spin","showPageOrReted","showSizeChanger","total","defaultPageSize","pageSizeOptions","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78556593.chunk.js","sourcesContent":["export default class SwapeServer {\r\n  _apiBase = 'https://api.themoviedb.org/3/search/movie?api_key=8c6dbd7d4f04d89380a2407e93d496b2&language=en-US&query=';\r\n\r\n  async getResurse(nameMovis, page = 1) {\r\n    const res = await fetch(`${this._apiBase}${nameMovis}&page=${page}&per_page=5&include_adult=false`);\r\n    if (!res.ok) {\r\n      throw Error(`recoved ${res.status}`);\r\n    }\r\n\r\n    return res.json();\r\n  }\r\n\r\n  async getAllPeople(nameMovis, page) {\r\n    return this.getResurse(nameMovis, page);\r\n  }\r\n\r\n  async getOnePage(nameMovis) {\r\n    const res = await this.getResurse(nameMovis);\r\n    return res.results;\r\n  }\r\n\r\n  async getAllGeneres() {\r\n    const res = await fetch(\r\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=8c6dbd7d4f04d89380a2407e93d496b2&language=en-US`\r\n    );\r\n    if (!res.ok) {\r\n      throw Error(`recoved ${res.status}`);\r\n    }\r\n    return res.json();\r\n  }\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport './serch.scss';\r\nimport PropsTypes from 'prop-types';\r\nimport debounce from 'lodash.debounce';\r\n\r\nexport default function Serch({ getSerchValue, onClickReted, selectedRetedFlag }) {\r\n  let value = '';\r\n\r\n  const debSave = useCallback(\r\n    debounce((value) => getSerchValue(value), 600),\r\n    []\r\n  );\r\n\r\n  function setSerchValue(e) {\r\n    if (e.target.value) {\r\n      value = e.target.value;\r\n      debSave(value);\r\n    }\r\n  }\r\n\r\n  function onClickRetedFlagTrue() {\r\n    onClickReted(true);\r\n  }\r\n  function onClickRetedFlagFalse() {\r\n    onClickReted(false);\r\n  }\r\n\r\n  const selectedSerch = `${selectedRetedFlag ? '' : 'selected'} serch__textSerch `;\r\n  const selectedReted = `${selectedRetedFlag ? 'selected' : ''} serch__textRated `;\r\n\r\n  return (\r\n    <div className=\"serch\">\r\n      <div className=\"serch__text\">\r\n        <button\r\n          type=\"button\"\r\n          className={selectedSerch}\r\n          onClick={onClickRetedFlagFalse}\r\n          onKeyDown={onClickRetedFlagFalse}\r\n        >\r\n          Search\r\n        </button>\r\n        <button type=\"button\" className={selectedReted} onClick={onClickRetedFlagTrue} onKeyDown={onClickRetedFlagTrue}>\r\n          Reted\r\n        </button>\r\n      </div>\r\n      <input onChange={setSerchValue} type=\"text\" className=\"serch__input\" placeholder=\"Type to search...\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nSerch.propTypes = {\r\n  getSerchValue: PropsTypes.func.isRequired,\r\n  onClickReted: PropsTypes.func.isRequired,\r\n  selectedRetedFlag: PropsTypes.bool.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport './block.scss';\r\nimport { Rate } from 'antd';\r\nimport PropsTypes from 'prop-types';\r\n\r\nexport default class Block extends Component {\r\n  state = {\r\n    loading: false,\r\n  };\r\n\r\n  selected = false;\r\n\r\n  image = `https://image.tmdb.org/t/p/w600_and_h900_bestv2`;\r\n\r\n  image1 = `https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-4ee37443c461fff5bc221b43ae018a5dae317469c8e2479a87d562537dd45fdc.svg`;\r\n\r\n  show = (genresId) => {\r\n    const { genres } = this.props;\r\n    return genresId.map((e) => {\r\n      for (const iterator of genres) {\r\n        if (iterator.id === e) {\r\n          return iterator.name;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  click = (value) => {\r\n    if (!this.selected) {\r\n      this.selected = true;\r\n      const { onClickReted } = this.props;\r\n      onClickReted({ ...this.props, value });\r\n    }\r\n  };\r\n\r\n  loadImg = () => {\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  color = (voteAverage) => {\r\n    if (voteAverage <= 3) {\r\n      return 'red';\r\n    }\r\n    if (voteAverage <= 5) {\r\n      return 'darkorange';\r\n    }\r\n    if (voteAverage <= 7) {\r\n      return 'gold';\r\n    }\r\n    return 'lawngreen';\r\n  };\r\n\r\n  truncate = function (e) {\r\n    let re = e.match(/^.{0,180}[\\S]*/);\r\n    const l = re[0].length;\r\n    re = re[0].replace(/\\s$/, '');\r\n    if (l < e.length) {\r\n      re += '...';\r\n    }\r\n    return re;\r\n  };\r\n\r\n  render() {\r\n    const { loading } = this.state;\r\n    const {\r\n      poster_path: posterPath,\r\n      original_title: originalTitle,\r\n      overview,\r\n      vote_average: voteAverage,\r\n      release_date: releaseDate,\r\n      genre_ids: genreIds,\r\n    } = this.props;\r\n\r\n    const genreId = this.show(genreIds);\r\n    const newOverview = this.truncate(overview);\r\n    const loadingImg = <div className={loading ? 'movies__imgLoadingNone' : 'movies__imgLoading'}>Loading...</div>;\r\n\r\n    const genreElement = genreId.map((element, i) => {\r\n      return <li key={i}>{element}</li>;\r\n    });\r\n\r\n    return (\r\n      <div className=\"movies__body\">\r\n        <div className=\"movies__imgBody\">\r\n          {loadingImg}\r\n          <img\r\n            className=\"movies__img\"\r\n            src={posterPath ? this.image + posterPath : this.image1}\r\n            alt=\"\"\r\n            onLoad={this.loadImg}\r\n          />\r\n        </div>\r\n        <div className=\"movies__items\">\r\n          <div className=\"movies__header\">\r\n            <h3 className=\"movies__title\">{originalTitle}</h3>\r\n            <div className={`movies__rating ${this.color(voteAverage)}`}>{voteAverage}</div>\r\n          </div>\r\n          <span className=\"movies__date\">{releaseDate}</span>\r\n          <ul className=\"movies__genre\">{genreElement.length === 0 ? <li>is unknown</li> : genreElement}</ul>\r\n          <span className=\"movies__text\">{newOverview}</span>\r\n          <div className=\"wraperRate\">\r\n            <Rate allowHalf defaultValue={voteAverage} count={10} onChange={this.click} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nBlock.defaultProps = {\r\n  poster_path: `https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-4ee37443c461fff5bc221b43ae018a5dae317469c8e2479a87d562537dd45fdc.svg`,\r\n};\r\n\r\nBlock.propTypes = {\r\n  onClickReted: PropsTypes.func.isRequired,\r\n  poster_path: PropsTypes.string,\r\n  original_title: PropsTypes.string.isRequired,\r\n  overview: PropsTypes.string.isRequired,\r\n  vote_average: PropsTypes.number.isRequired,\r\n  genre_ids: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.number])).isRequired,\r\n  genres: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.number])).isRequired,\r\n  release_date: PropsTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport Block from '../block/block';\r\n\r\nexport default function SerchResult({ resultSerch, onClickReted, genres }) {\r\n  const element = resultSerch.map((item) => {\r\n    const { id, ...itemProps } = item;\r\n    return (\r\n      <div key={id}>\r\n        <Block {...itemProps} onClickReted={onClickReted} genres={genres} />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"movies\">{element}</div>;\r\n}\r\n\r\nSerchResult.propTypes = {\r\n  onClickReted: PropsTypes.func.isRequired,\r\n  resultSerch: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.number])).isRequired,\r\n  genres: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.number])).isRequired,\r\n};\r\n","import React from 'react';\r\nimport './error404.scss';\r\n\r\nexport default function Error404() {\r\n  return <div className=\"error\">no internet, check connection</div>;\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Spin, Pagination } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport SwapeServer from './components/swaipServer/swaipServer';\r\nimport './components/index.scss';\r\nimport Serch from './components/serch/serch';\r\nimport SerchResult from './components/serchResult/serchResult';\r\nimport Error404 from './components/error404/error404';\r\n\r\nconst swapeServer = new SwapeServer();\r\nexport default class App extends Component {\r\n  flagOneDownloadPage = false;\r\n\r\n  page = 1;\r\n\r\n  genres = [];\r\n\r\n  state = {\r\n    resultSerch: [],\r\n    totalResults: 0,\r\n    loading: true,\r\n    error404: false,\r\n    valueSerch: '',\r\n    selectedRetedFlag: false,\r\n    reted: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    swapeServer.getAllGeneres().then((r) => {\r\n      this.genres = r.genres;\r\n    });\r\n    swapeServer\r\n      .getAllPeople('The way back')\r\n      .then((r) => {\r\n        this.setState({ resultSerch: r.results, totalResults: r.total_results, loading: false, error404: false });\r\n      })\r\n      .catch(() => {\r\n        this.setState({ error404: true, loading: false });\r\n      });\r\n  }\r\n\r\n  pageClick = (current) => {\r\n    const { valueSerch } = this.state;\r\n    this.setState({ loading: true });\r\n    this.getSerchValue(valueSerch, current);\r\n  };\r\n\r\n  getSerchValue = (nameMovis, page) => {\r\n    const { valueSerch } = this.state;\r\n    this.page = page;\r\n    if (nameMovis !== valueSerch) {\r\n      this.page = 1;\r\n    }\r\n    this.setState({ loading: true });\r\n    swapeServer\r\n      .getAllPeople(nameMovis, page)\r\n      .then((r) => {\r\n        this.setState({\r\n          resultSerch: r.results,\r\n          totalResults: r.total_results,\r\n          loading: false,\r\n          error404: false,\r\n          valueSerch: nameMovis,\r\n        });\r\n      })\r\n      .catch(() => {\r\n        this.setState({ error404: true, loading: false });\r\n      });\r\n  };\r\n\r\n  onClickRetedFlag = (flag) => {\r\n    this.setState({ selectedRetedFlag: flag });\r\n  };\r\n\r\n  onClickReted = (value) => {\r\n    this.setState(({ reted }) => {\r\n      let newArr = [];\r\n      if (reted) {\r\n        newArr = [...reted, value];\r\n      } else {\r\n        newArr = [value];\r\n      }\r\n\r\n      return {\r\n        reted: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { resultSerch, totalResults, loading, error404, selectedRetedFlag, reted } = this.state;\r\n    const spin = (\r\n      <div className=\"example\">\r\n        <Spin />\r\n      </div>\r\n    );\r\n    const showPageOrReted = (\r\n      <SerchResult\r\n        resultSerch={selectedRetedFlag ? reted : resultSerch}\r\n        onClickReted={this.onClickReted}\r\n        genres={this.genres}\r\n      />\r\n    );\r\n    return (\r\n      <div>\r\n        <Serch\r\n          getSerchValue={this.getSerchValue}\r\n          onClickReted={this.onClickRetedFlag}\r\n          selectedRetedFlag={selectedRetedFlag}\r\n        />\r\n        {error404 ? <Error404 /> : loading ? spin : showPageOrReted}\r\n        <div className=\"pageBody\">\r\n          <Pagination\r\n            current={this.page}\r\n            showSizeChanger={false}\r\n            onChange={this.pageClick}\r\n            total={selectedRetedFlag ? 1 : totalResults}\r\n            defaultPageSize={20}\r\n            pageSizeOptions={[20]}\r\n            disabled={totalResults <= 20}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}